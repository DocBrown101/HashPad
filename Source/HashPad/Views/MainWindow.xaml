<Window x:Class="HashPad.Views.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:vm="clr-namespace:HashPad.ViewModels"
		xmlns:models="clr-namespace:HashPad.Models"
		xmlns:controls="clr-namespace:HashPad.Views.Controls"
		xmlns:converters="clr-namespace:HashPad.Views.Converters"
		xmlns:properties="clr-namespace:HashPad.Properties"
		Title="{Binding Source={x:Static models:ProductInfo.Title}, Mode=OneTime}"
		Width="320" MaxWidth="320"
		Height="400" SizeToContent="Height"
		WindowStyle="None">
	<WindowChrome.WindowChrome>
		<WindowChrome CaptionHeight="0"
					  GlassFrameThickness="-1"
					  CornerRadius="0"
					  ResizeBorderThickness="0"/>
	</WindowChrome.WindowChrome>

	<Window.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Chrome.xaml"/>
				<ResourceDictionary>
					<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverterKey"/>
					<converters:BooleanInverseConverter x:Key="BooleanInverseConverterKey"/>
					<converters:BooleanToProgressStateConverter x:Key="BooleanToProgressStateConverterKey"/>

					<Color x:Key="App.BackgroundColor">#FFf3f3f3</Color>
					<Color x:Key="App.BackgroundColor.Mica">Transparent</Color>

					<Color x:Key="Shadow.BackgroundColor">#FFe1e1e1</Color>

					<SolidColorBrush x:Key="App.Background" Color="{DynamicResource App.BackgroundColor}"/>
					<SolidColorBrush x:Key="App.Foreground" Color="Black"/>
					<SolidColorBrush x:Key="Ancillary.Foreground" Color="Gray"/>
					<SolidColorBrush x:Key="Link.Foreground" Color="#FF6a6a6a"/>

					<SolidColorBrush x:Key="Window.Border" Color="#AA6a6a6a"/>
					<SolidColorBrush x:Key="List.Background" Color="#C2fefefe"/>
					<SolidColorBrush x:Key="Menu.Background" Color="{StaticResource Shadow.BackgroundColor}"/>

					<SolidColorBrush x:Key="Match.Foregroud" Color="White"/>
					<SolidColorBrush x:Key="Match.Background" Color="DeepSkyBlue"/>

					<SolidColorBrush x:Key="Progress.Foreground" Color="LightSkyBlue"/>
					<SolidColorBrush x:Key="Progress.Background" Color="{StaticResource Shadow.BackgroundColor}"/>

					<SolidColorBrush x:Key="HashCheckBox.Border" Color="LightGray"/>

					<!-- Same color as TextBox.Static.Border -->
					<SolidColorBrush x:Key="Button.Static.Border" Color="#FFabadb3"/>
					<SolidColorBrush x:Key="Button.Static.Background" Color="{StaticResource Shadow.BackgroundColor}"/>
					<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
					<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
					<SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
					<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
					<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF9c9c9c"/>
					<SolidColorBrush x:Key="Button.Disabled.Background" Color="{DynamicResource App.BackgroundColor}"/>
					<SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFcbcccf"/>

					<ControlTemplate x:Key="ActionButtonTemplate" TargetType="{x:Type ButtonBase}">
						<Border x:Name="border"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								Background="{TemplateBinding Background}"
								TextElement.Foreground="{TemplateBinding Foreground}"
								SnapsToDevicePixels="True">
							<ContentPresenter x:Name="contentPresenter"
											  Margin="{TemplateBinding Padding}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  Content="{TemplateBinding Content}"
											  ContentTemplate="{TemplateBinding ContentTemplate}"
											  ContentStringFormat="{TemplateBinding ContentStringFormat}"
											  Focusable="False"
											  RecognizesAccessKey="True"
											  SnapsToDevicePixels="True"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
								<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
								<Setter Property="TextElement.Foreground" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
								<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
								<Setter Property="TextElement.Foreground" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
								<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
								<Setter Property="TextElement.Foreground" TargetName="border" Value="{StaticResource Button.Disabled.Foreground}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>

					<Style x:Key="ActionButtonStyle" TargetType="{x:Type Button}">
						<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
						<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
						<Setter Property="Foreground" Value="{StaticResource App.Foreground}"/>
						<Setter Property="Template" Value="{StaticResource ActionButtonTemplate}"/>
					</Style>

					<Style x:Key="AncillaryButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ActionButtonStyle}">
						<Setter Property="Foreground" Value="{StaticResource Ancillary.Foreground}"/>
						<Setter Property="TextElement.FontSize" Value="11.5"/>
					</Style>

					<Style x:Key="TextButtonStyle" TargetType="{x:Type Button}">
						<Setter Property="Foreground" Value="{StaticResource App.Foreground}"/>
						<Setter Property="Cursor" Value="Hand"/>
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type Button}">
									<ContentPresenter/>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
						<Style.Triggers>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Foreground" Value="{StaticResource Button.Disabled.Foreground}"/>
							</Trigger>
						</Style.Triggers>
					</Style>

					<Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
						<Setter Property="BorderThickness" Value="0"/>
						<Setter Property="BorderBrush" Value="Transparent"/>
						<Setter Property="Background" Value="Transparent"/>
						<Setter Property="Foreground" Value="{StaticResource App.Foreground}"/>
						<Setter Property="Padding" Value="10,1"/>
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ToggleButton}">
									<Border x:Name="border"
											BorderThickness="{TemplateBinding BorderThickness}"
											BorderBrush="{TemplateBinding BorderBrush}"
											Background="{TemplateBinding Background}"
											TextElement.Foreground="{TemplateBinding Foreground}"
											SnapsToDevicePixels="True">
										<ContentPresenter x:Name="contentPresenter"
														  Margin="{TemplateBinding Padding}"
														  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
														  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
														  Content="{TemplateBinding Content}"
														  ContentTemplate="{TemplateBinding ContentTemplate}"
														  ContentStringFormat="{TemplateBinding ContentStringFormat}"
														  Focusable="False"
														  RecognizesAccessKey="True"
														  SnapsToDevicePixels="True"/>
									</Border>
									<ControlTemplate.Triggers>
										<Trigger Property="IsMouseOver" Value="True">
											<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
										</Trigger>
										<Trigger Property="IsPressed" Value="True">
											<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
										</Trigger>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
											<Setter Property="TextElement.Foreground" TargetName="border" Value="{StaticResource Button.Disabled.Foreground}"/>
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>

					<SolidColorBrush x:Key="CheckBox.Static.Border" Color="#FF707070"/>
					<SolidColorBrush x:Key="CheckBox.Static.Background" Color="#FFFFFFFF"/>
					<SolidColorBrush x:Key="CheckBox.Static.Glyph" Color="#FFFFFFFF"/>
					<SolidColorBrush x:Key="CheckBox.MouseOver.Border" Color="#FF5593FF"/>
					<SolidColorBrush x:Key="CheckBox.MouseOver.Background" Color="#FFF3F9FF"/>
					<SolidColorBrush x:Key="CheckBox.Disabled.Border" Color="#FFBCBCBC"/>
					<SolidColorBrush x:Key="CheckBox.Disabled.Background" Color="#FFE6E6E6"/>
					<SolidColorBrush x:Key="CheckBox.Pressed.Border" Color="#FF3C77DD"/>
					<SolidColorBrush x:Key="CheckBox.Pressed.Background" Color="#FFD9ECFF"/>
					<SolidColorBrush x:Key="CheckBox.Checked.Background" Color="#FF0090e0"/>

					<Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
						<Setter Property="BorderThickness" Value="1"/>
						<Setter Property="BorderBrush" Value="{StaticResource CheckBox.Static.Border}"/>
						<Setter Property="Background" Value="{StaticResource CheckBox.Static.Background}"/>
						<Setter Property="Foreground" Value="{StaticResource App.Foreground}"/>
						<Setter Property="Padding" Value="4,-1,0,0"/>
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type CheckBox}">
									<Grid Background="Transparent"
										  SnapsToDevicePixels="True" UseLayoutRounding="True">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto"/>
											<ColumnDefinition Width="*"/>
										</Grid.ColumnDefinitions>

										<Border Grid.Column="0"
												x:Name="checkBoxBorder"
												Margin="1"
												BorderThickness="{TemplateBinding BorderThickness}"
												BorderBrush="{TemplateBinding BorderBrush}"
												Background="{TemplateBinding Background}"
												HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
											<Grid>
												<Path x:Name="optionMark"
													  Margin="1"
													  Data="M 10.0,1.2L 4.7,9.1L 4.5,9.1L 0.0,5.2L 1.3,3.5L 4.3,6.1L 8.3,0.0 Z"
													  Stretch="None"
													  Fill="{StaticResource CheckBox.Static.Glyph}"
													  Opacity="0"/>
												<Rectangle x:Name="indeterminateMark"
														   Height="2" Margin="2"
														   Fill="{StaticResource CheckBox.Static.Glyph}"
														   Opacity="0"/>
											</Grid>
										</Border>
										<ContentPresenter Grid.Column="1"
														  Margin="{TemplateBinding Padding}"
														  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
														  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
														  Focusable="False" RecognizesAccessKey="True"/>
									</Grid>
									<ControlTemplate.Triggers>
										<Trigger Property="IsMouseOver" Value="true">
											<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource CheckBox.MouseOver.Background}"/>
											<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource CheckBox.MouseOver.Border}"/>
										</Trigger>
										<Trigger Property="IsEnabled" Value="false">
											<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource CheckBox.Disabled.Background}"/>
											<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource CheckBox.Disabled.Border}"/>
										</Trigger>
										<Trigger Property="IsPressed" Value="true">
											<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource CheckBox.Pressed.Background}"/>
											<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource CheckBox.Pressed.Border}"/>
										</Trigger>
										<Trigger Property="IsChecked" Value="true">
											<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource CheckBox.Checked.Background}"/>
											<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource CheckBox.Checked.Background}"/>
											<Setter TargetName="optionMark" Property="Opacity" Value="1"/>
											<Setter TargetName="indeterminateMark" Property="Opacity" Value="0"/>
										</Trigger>
										<Trigger Property="IsChecked" Value="{x:Null}">
											<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource CheckBox.Checked.Background}"/>
											<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource CheckBox.Checked.Background}"/>
											<Setter TargetName="optionMark" Property="Opacity" Value="0"/>
											<Setter TargetName="indeterminateMark" Property="Opacity" Value="1"/>
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>

					<Style x:Key="HashCheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CheckBoxStyle}">
						<Setter Property="BorderBrush" Value="{StaticResource HashCheckBox.Border}" />
					</Style>

					<Style x:Key="LinkTextStyle" TargetType="{x:Type Inline}">
						<Setter Property="Foreground" Value="{StaticResource Link.Foreground}"/>
						<Setter Property="TextDecorations" Value="Underline"/>
						<Setter Property="Cursor" Value="Hand"/>
					</Style>
				</ResourceDictionary>
			</ResourceDictionary.MergedDictionaries>

			<CollectionViewSource x:Key="HashesViewSource" Source="{Binding Hashes}">
				<CollectionViewSource.GroupDescriptions>
					<PropertyGroupDescription PropertyName="HashFunction"/>
				</CollectionViewSource.GroupDescriptions>
			</CollectionViewSource>
		</ResourceDictionary>
	</Window.Resources>

	<Window.DataContext>
		<vm:MainWindowViewModel/>
	</Window.DataContext>

	<Window.TaskbarItemInfo>
		<TaskbarItemInfo ProgressState="{Binding IsReading, Converter={StaticResource BooleanToProgressStateConverterKey}}"
						 ProgressValue="{Binding ProgressRate}"/>
	</Window.TaskbarItemInfo>

	<Window.Background>
		<StaticResource ResourceKey="App.Background"/>
	</Window.Background>
	<Window.Foreground>
		<StaticResource ResourceKey="App.Foreground"/>
	</Window.Foreground>

	<Border BorderThickness="1"
			BorderBrush="{StaticResource Window.Border}"
			UseLayoutRounding="True">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="Auto"/>
			</Grid.RowDefinitions>

			<!-- Title bar -->
			<Grid Grid.Row="0"
				  x:Name="TitleBar"
				  Background="Transparent">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition/>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>

				<TextBlock Grid.Column="1"
						   Margin="8,0" HorizontalAlignment="Left" VerticalAlignment="Center"
						   Text="{Binding Title, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>

				<Button Grid.Column="2"
						Style="{StaticResource CaptionButton.MenuStyle}"
						Click="Menu_Click"/>
				<Button Grid.Column="3"
						Style="{StaticResource CaptionButton.MinimizeStyle}"
						Click="Minimize_Click"/>
				<Button Grid.Column="4"
						Style="{StaticResource CaptionButton.CloseStyle}"
						Click="Close_Click"/>
			</Grid>

			<StackPanel Grid.Row="1"
						x:Name="MainPain">
				<StackPanel Background="Transparent">
					<StackPanel IsEnabled="{Binding IsReading, Mode=OneWay, Converter={StaticResource BooleanInverseConverterKey}}">
						<!-- File Path -->
						<Label Margin="6,0"
							   Foreground="{StaticResource App.Foreground}"
							   Content="{x:Static properties:Resources.FilePath}"/>
						<TextBox MinHeight="24" Margin="10,0"
								 VerticalContentAlignment="Center"
								 IsReadOnly="True"
								 Text="{Binding SourceFilePath, Mode=OneWay}"/>
						<Button Margin="10,-1,10,0" HorizontalAlignment="Right"
								Padding="6,0"
								Style="{StaticResource AncillaryButtonStyle}"
								Content="{x:Static properties:Resources.Browse}"
								Command="{Binding BrowseCommand}"/>
					</StackPanel>
					<StackPanel>
						<!-- Expected Value -->
						<Label Margin="6,0"
							   Foreground="{StaticResource App.Foreground}"
							   Content="{x:Static properties:Resources.ExpectedValue}"/>
						<TextBox MinHeight="24" Margin="10,0"
								 VerticalContentAlignment="Center"
								 FontFamily="Consolas" FontSize="13" TextWrapping="Wrap"
								 Text="{Binding ExpectedValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=200}"/>
						<Button Margin="10,-1,10,8" HorizontalAlignment="Right"
								Padding="6,0"
								Style="{StaticResource AncillaryButtonStyle}"
								Content="{x:Static properties:Resources.Read}"
								Command="{Binding ReadCommand}"/>
					</StackPanel>
				</StackPanel>

				<StackPanel Background="{StaticResource List.Background}">
					<!-- Hash -->
					<ListBox Margin="0,6"
							 HorizontalContentAlignment="Stretch"
							 ScrollViewer.HorizontalScrollBarVisibility="Disabled"
							 ItemsSource="{Binding Source={StaticResource HashesViewSource}}"
							 Background="{x:Null}">
						<ListBox.Template>
							<ControlTemplate TargetType="{x:Type ListBox}">
								<!-- Remove default padding of ScrollViewer -->
								<Border Background="{TemplateBinding Background}">
									<ScrollViewer Focusable="False">
										<ItemsPresenter SnapsToDevicePixels="True"/>
									</ScrollViewer>
								</Border>
							</ControlTemplate>
						</ListBox.Template>
						<ListBox.GroupStyle>
							<GroupStyle>
								<GroupStyle.ContainerStyle>
									<Style TargetType="{x:Type GroupItem}">
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type GroupItem}">
													<Grid>
														<Grid.RowDefinitions>
															<RowDefinition Height="Auto"/>
															<RowDefinition Height="Auto"/>
														</Grid.RowDefinitions>
														<Grid.ColumnDefinitions>
															<ColumnDefinition Width="Auto"/>
															<ColumnDefinition Width="*"/>
														</Grid.ColumnDefinitions>

														<ToggleButton Grid.Row="0"
																	  x:Name="toggle"
																	  Style="{StaticResource ToggleButtonStyle}"
																	  FontWeight="Bold"
																	  Content="{Binding Name, Mode=OneTime}"
																	  controls:HashToggleButtonProperty.Items="{Binding Items}"/>
														<ItemsPresenter Grid.Row="1" Grid.ColumnSpan="2"
																		Visibility="{Binding ElementName=toggle, Path=IsChecked, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverterKey}}"/>
													</Grid>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</GroupStyle.ContainerStyle>
							</GroupStyle>
						</ListBox.GroupStyle>
						<ListBox.ItemTemplate>
							<DataTemplate>
								<StackPanel>
									<StackPanel Margin="9,0,0,0"
												Orientation="Horizontal">
										<CheckBox Margin="0,5,5,5" VerticalAlignment="Center"
												  Style="{StaticResource HashCheckBoxStyle}"
												  Content="{Binding HashName, Mode=OneTime}"
												  IsEnabled="{Binding IsReading, Mode=OneWay, Converter={StaticResource BooleanInverseConverterKey}}"
												  IsChecked="{Binding IsTarget, Mode=TwoWay}"/>
										<Grid Background="{StaticResource Match.Background}"
											  Visibility="{Binding HasMatch, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverterKey}}">
											<Label VerticalAlignment="Center"
												   Padding="6,0"
												   Foreground="{StaticResource Match.Foregroud}"
												   FontWeight="Bold"
												   Content="{x:Static properties:Resources.Match}"/>
										</Grid>
									</StackPanel>

									<ProgressBar Height="3" Margin="10,-3,10,0"
												 BorderThickness="0"
												 Background="{StaticResource Progress.Background}"
												 Foreground="{StaticResource Progress.Foreground}"
												 Visibility="{Binding IsReading, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverterKey}}"
												 Maximum="1"
												 Value="{Binding ProgressRate, Mode=OneWay}"/>

									<TextBox MinHeight="24" Margin="10,0,10,8"
											 VerticalContentAlignment="Center"
											 IsReadOnly="True" FontFamily="Consolas" FontSize="13" TextWrapping="Wrap"
											 Text="{Binding HashValue, Mode=OneWay}"
											 Visibility="{Binding IsTarget, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverterKey}}"
											 controls:TextBoxProperty.SelectAllOnFocus="True"/>
								</StackPanel>
							</DataTemplate>
						</ListBox.ItemTemplate>
						<ListBox.ItemContainerStyle>
							<Style TargetType="{x:Type ListBoxItem}">
								<Setter Property="OverridesDefaultStyle" Value="True"/>
								<Setter Property="Focusable" Value="False"/>
								<Setter Property="Margin" Value="0"/>
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type ListBoxItem}">
											<ContentPresenter/>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</ListBox.ItemContainerStyle>
					</ListBox>

					<Grid Margin="10,0,10,10">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="3*"/>
							<ColumnDefinition Width="1*"/>
						</Grid.ColumnDefinitions>

						<!-- Compute -->
						<Button Grid.Column="0"
								Padding="6"
								Style="{StaticResource ActionButtonStyle}"
								Content="{x:Static properties:Resources.Compute}"
								Command="{Binding ComputeCommand}"/>

						<!-- Stop -->
						<Button Grid.Column="1"
								Padding="6"
								Content="{x:Static properties:Resources.Stop}"
								Command="{Binding StopCommand}">
							<Button.Style>
								<Style TargetType="{x:Type Button}" BasedOn="{StaticResource ActionButtonStyle}">
									<Setter Property="Margin" Value="0"/>
									<Setter Property="BorderThickness" Value="0,1,1,1"/>
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="True">
											<Setter Property="Margin" Value="-1,0,0,0"/>
											<Setter Property="BorderThickness" Value="1"/>
										</Trigger>
									</Style.Triggers>
								</Style>
							</Button.Style>
						</Button>
					</Grid>
				</StackPanel>
			</StackPanel>

			<!-- Menu -->
			<Grid Grid.Row="1"
				  x:Name="MenuPain"
				  Width="180" HorizontalAlignment="Right"
				  Background="{StaticResource Menu.Background}"
				  Visibility="{Binding IsMenuOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=OneWay, FallbackValue=Collapsed, Converter={StaticResource BooleanToVisibilityConverterKey}}">
				<StackPanel Margin="8">
					<CheckBox Margin="4"
							  Style="{StaticResource CheckBoxStyle}"
							  IsChecked="{Binding IsSendToAdded, Mode=TwoWay}">
						<TextBlock TextWrapping="Wrap"
								   Text="{x:Static properties:Resources.MenuAdd}"/>
					</CheckBox>

					<CheckBox Margin="4"
							  Style="{StaticResource CheckBoxStyle}"
							  Visibility="{Binding Settings.IsPersistent, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverterKey}}"
							  IsChecked="{Binding Settings.ComputesAutomatically, Mode=TwoWay}">
						<TextBlock TextWrapping="Wrap"
								   Text="{x:Static properties:Resources.MenuCompute}"/>
					</CheckBox>

					<CheckBox Margin="4"
							  Style="{StaticResource CheckBoxStyle}"
							  Visibility="{Binding Settings.IsPersistent, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverterKey}}"
							  IsChecked="{Binding Settings.ReadsAutomatically, Mode=TwoWay}">
						<TextBlock TextWrapping="Wrap"
								   Text="{x:Static properties:Resources.MenuRead}"/>
					</CheckBox>

					<CheckBox Margin="4"
							  Style="{StaticResource CheckBoxStyle}"
							  Visibility="{Binding Settings.IsPersistent, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverterKey}}"
							  IsChecked="{Binding Settings.PrefersSha3, Mode=TwoWay}">
						<TextBlock TextWrapping="Wrap"
								   Text="{x:Static properties:Resources.MenuPrefer}"/>
					</CheckBox>
				</StackPanel>

				<StackPanel Margin="12,4,12,12" VerticalAlignment="Bottom">
					<TextBlock Text="{Binding Source={x:Static models:ProductInfo.Title}, Mode=OneTime}"/>
					<TextBlock>
						<Run Text="{Binding Source={x:Static models:ProductInfo.Version}, Mode=OneTime}"/>
						<Run Text="|"/>
						<Run Style="{StaticResource LinkTextStyle}"
							 Text="{x:Static properties:Resources.Site}">
							<Run.InputBindings>
								<MouseBinding MouseAction="LeftClick" Command="{Binding OpenSiteCommand}"/>
							</Run.InputBindings>
						</Run>
						<Run Text="|"/>
						<Run Style="{StaticResource LinkTextStyle}"
							 Text="{x:Static properties:Resources.License}">
							<Run.InputBindings>
								<MouseBinding MouseAction="LeftClick" Command="{Binding OpenLicenseCommand}"/>
							</Run.InputBindings>
						</Run>
					</TextBlock>
					<Button Style="{StaticResource TextButtonStyle}"
							Content="{x:Static properties:Resources.Update}"
							Visibility="{Binding IsUpdateAppAvailable, Converter={StaticResource BooleanToVisibilityConverterKey}}"
							Command="{Binding UpdateAppCommand}"/>
				</StackPanel>
			</Grid>
		</Grid>
	</Border>
</Window>